import Cookies from 'js-cookie'
import { authApi, type User } from './api'

// Проверка авторизации пользователя
export function isAuthenticated(): boolean {
  return !!Cookies.get('access_token')
}

// Сохранение токена авторизации
export function saveAuthToken(token: string): void {
  Cookies.set('access_token', token, { 
    expires: 7, // 7 дней
    secure: process.env.NODE_ENV === 'production',
    sameSite: 'strict'
  })
}

// Удаление токена авторизации
export function removeAuthToken(): void {
  Cookies.remove('access_token')
}

// Получение токена авторизации
export function getAuthToken(): string | undefined {
  return Cookies.get('access_token')
}

// Выход из системы
export async function logout(): Promise<void> {
  try {
    await authApi.logout()
  } catch (error) {
    console.error('Ошибка при выходе:', error)
  } finally {
    removeAuthToken()
    window.location.href = '/'
  }
}

// Проверка и обработка параметров URL для завершения авторизации
export function handleAuthCallback(): string | null {
  if (typeof window === 'undefined') return null
  
  const urlParams = new URLSearchParams(window.location.search)
  const authToken = urlParams.get('auth_token')
  
  if (authToken) {
    // Удаляем параметр из URL
    const newUrl = window.location.pathname
    window.history.replaceState({}, '', newUrl)
    return authToken
  }
  
  return null
}

// Начало процесса авторизации через Telegram
export async function startTelegramAuth(): Promise<void> {
  try {
    const { telegram_url } = await authApi.createAuthToken()
    window.location.href = telegram_url
  } catch (error) {
    console.error('Ошибка при создании токена авторизации:', error)
    throw new Error('Не удалось начать авторизацию')
  }
}

// Завершение авторизации с токеном
export async function completeAuth(authToken: string): Promise<User> {
  try {
    const response = await authApi.checkAuthStatus(authToken)
    saveAuthToken(response.access_token)
    return response.user
  } catch (error) {
    console.error('Ошибка при завершении авторизации:', error)
    throw new Error('Не удалось завершить авторизацию')
  }
} 